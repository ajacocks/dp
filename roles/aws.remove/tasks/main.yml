---
# tasks file for roles/aws.remove

#---------------------------------------------------
#  AMI Choice
#---------------------------------------------------
- name: Define AMIs to use, based on region, for us-east-1
  set_fact:
    nodes:
      tower_rhel:
        ami_id: "ami-0394fe9914b475c53" # RHEL-7.5_HVM-20180813-x86_64-0-Hourly2-GP2
        instance_type: "t2.large"
      rhel:
        ami_id: "ami-0394fe9914b475c53" # RHEL-7.5_HVM-20180813-x86_64-0-Hourly2-GP2
        instance_type: "t2.small"
      win:
        ami_id: "ami-01945499792201081" # Windows_Server-2016-English-Full-Base-2018.09.15
        instance_type: "t2.large"
  when: region == "us-east-1"

- name: Define AMIs to use, based on region, for us-east-2
  set_fact:
    nodes:
      tower_rhel:
        ami_id: "ami-04268981d7c33264d" # RHEL-7.5_HVM-20180813-x86_64-0-Access2-GP2
        instance_type: "t2.large"
      rhel:
        ami_id: "ami-04268981d7c33264d" # RHEL-7.5_HVM-20180813-x86_64-0-Access2-GP2
        instance_type: "t2.small"
      win:
        ami_id: "ami-0ca3e3965ada31684" # Windows_Server-2016-English-Full-Base-2018.09.15
        instance_type: "t2.large"
  when: region == "us-east-2"

#===============================================================================
#  Search and record IDs
#===============================================================================
- name: Initialize an empty list for our strings
  set_fact:
    route_id: ""
    subnet_id: ""
    vpc_id: ""
    tower_rhel_instance_ids: []
    rhel_instance_ids: []
    rhel_group_id: ""
    win_instance_ids: []
    win_group_id: ""

- name: lookup running RHEL instances
  ec2_instance_facts:
    region: "{{ region }}"
    filters:
      tag:rhel: "dp-{{ workshop_prefix }}"
  register: ec2_rhel

- debug:
    var: ec2_rhel

- name: Append RHEL instances to list`
  set_fact:
    rhel_instance_ids: "{{ rhel_instance_ids }} + [ '{{ item.instance_id }}' ]"
  with_items: "{{ ec2_rhel.instances }}"

- name: lookup running RHEL Tower instances
  ec2_instance_facts:
    region: "{{ region }}"
    filters:
      tag:tower_rhel: "dp-{{ workshop_prefix }}"
  register: ec2_tower_rhel

- debug:
    var: ec2_tower_rhel

- name: Append RHEL Tower instances to list`
  set_fact:
    tower_rhel_instance_ids: "{{ tower_rhel_instance_ids }} + [ '{{ item.instance_id }}' ]"
  with_items: "{{ ec2_tower_rhel.instances }}"

- name: lookup running Windows instances
  ec2_instance_facts:
    region: "{{ region }}"
    filters:
      tag:win: "dp-{{ workshop_prefix }}"
  register: ec2_win

- name: Append Windows instances to list`
  set_fact:
    win_instance_ids: "{{ win_instance_ids }} + [ '{{ item.instance_id }}' ]"
  with_items: "{{ ec2_win.instances }}"

- name: lookup running windows security groups
  ec2_group_facts:
    region: "{{ region }}"
    filters:
      tag:win: "dp-{{ workshop_prefix }}"
  register: ec2_win_grp

- name: Record Windows security group ID
  set_fact:
    win_group_id: "{{ ec2_win_grp.security_groups[0].group_id }}"
  when: ec2_win_grp.security_groups|length > 0

- name: lookup running rhel security groups
  ec2_group_facts:
    region: "{{ region }}"
    filters:
      tag:rhel: "dp-{{ workshop_prefix }}"
  register: ec2_rhel_grp

- name: Record RHEL security group ID
  set_fact:
    rhel_group_id: "{{ ec2_rhel_grp.security_groups[0].group_id }}"
  when: ec2_rhel_grp.security_groups|length > 0

- name: lookup running subnets
  ec2_vpc_subnet_facts:
    region: "{{ region }}"
    filters:
      tag:workshop: "dp"
      tag:workshop_prefix: "{{ workshop_prefix }}"
  register: ec2_subnet

- name: Record subnet ID
  set_fact:
    subnet_id: "{{ ec2_subnet.subnets[0].subnet_id }}"
  when: ec2_subnet.subnets|length > 0

- name: lookup running vpc route tables
  ec2_vpc_route_table_facts:
    region: "{{ region }}"
    filters:
      tag:workshop: "dp"
      tag:workshop_prefix: "{{ workshop_prefix }}"
  register: ec2_route

- name: Record route table ID 
  set_fact:
    route_id: "{{ ec2_route.route_tables[0].id }}"
  when: ec2_route.route_tables|length > 0

- name: lookup running vpcs
  ec2_vpc_net_facts:
    region: "{{ region }}"
    filters:
      tag:workshop: "dp"
      tag:workshop_prefix: "{{ workshop_prefix }}"
  register: ec2_vpc

- name: Record VPC ID
  set_fact:
    vpc_id: "{{ ec2_vpc.vpcs[0].id }}"
  when: ec2_vpc.vpcs|length > 0

- name: Lookup existing Windows DNS records
  route53:
    state: get
    zone: "{{ domain_name }}"
    record: "win2016.{{ dns_idx }}.{{ workshop_prefix }}.{{ domain_name }}"
    type: CNAME
  register: win_rec
  loop: "{{ win_instance_ids }}"
  loop_control:
    index_var: dns_idx

- name: Lookup existing RHEL DNS records
  route53:
    state: get
    zone: "{{ domain_name }}"
    record: "rhel7.{{ dns_idx }}.{{ workshop_prefix }}.{{ domain_name }}"
    type: CNAME
  register: rhel_rec
  loop: "{{ rhel_instance_ids }}"
  loop_control:
    index_var: dns_idx

- name: Lookup existing RHEL Tower DNS records
  route53:
    state: get
    zone: "{{ domain_name }}"
    record: "tower.{{ dns_idx }}.{{ workshop_prefix }}.{{ domain_name }}"
    type: CNAME
  register: tower_rhel_rec
  loop: "{{ tower_rhel_instance_ids }}"
  loop_control:
    index_var: dns_idx


#===============================================================================
#  Deprovisioning
#===============================================================================

- name: Remove existing Windows DNS records
  route53:
    state: absent
    zone: "{{ domain_name }}"
    record: "{{ item.set.record }}"
    ttl: "{{ item.set.ttl }}"
    type: "{{ item.set.type }}"
    value: "{{ item.set.value }}"
  when: item.set.record is defined
  with_items: "{{ win_rec.results }}"

- name: Remove Windows instances
  ec2:
    key_name: "dp-{{ workshop_prefix }}-key"
    group: "dp-{{ workshop_prefix }}-win-sg"
    region: "{{ region }}"
    instance_type: "{{ nodes.win.instance_type }}"
    image: "{{ nodes.win.ami_id }}"
    vpc_subnet_id: "{{ subnet_id }}"
    wait: true
    instance_ids: "{{ win_instance_ids }}"
    state: absent
  when: win_instance_ids|length > 0

- name: Remove existing RHEL DNS records
  route53:
    state: absent
    zone: "{{ domain_name }}"
    record: "{{ item.set.record }}"
    ttl: "{{ item.set.ttl }}"
    type: "{{ item.set.type }}"
    value: "{{ item.set.value }}"
  when: item.set.record is defined
  with_items: "{{ rhel_rec.results }}"

- name: Remove existing RHEL Tower DNS records
  route53:
    state: absent
    zone: "{{ domain_name }}"
    record: "{{ item.set.record }}"
    ttl: "{{ item.set.ttl }}"
    type: "{{ item.set.type }}"
    value: "{{ item.set.value }}"
  when: item.set.record is defined
  with_items: "{{ tower_rhel_rec.results }}"

- debug:
    var: nodes

- name: Remove RHEL Tower instances
  ec2:
    key_name: "dp-{{ workshop_prefix }}-key"
    group: "dp-{{ workshop_prefix }}-rhel-sg"
    region: "{{ region }}"
    instance_type: "{{ nodes.tower_rhel.instance_type }}"
    image: "{{ nodes.tower_rhel.ami_id }}"
    vpc_subnet_id: "{{ subnet_id }}"
    wait: true
    instance_ids: "{{ tower_rhel_instance_ids }}"
    state: absent
  when: tower_rhel_instance_ids|length > 0
    #  when: false

- name: Remove RHEL instances
  ec2:
    key_name: "dp-{{ workshop_prefix }}-key"
    group: "dp-{{ workshop_prefix }}-rhel-sg"
    region: "{{ region }}"
    instance_type: "{{ nodes.rhel.instance_type }}"
    image: "{{ nodes.rhel.ami_id }}"
    vpc_subnet_id: "{{ subnet_id }}"
    wait: true
    instance_ids: "{{ rhel_instance_ids }}"
    state: absent
  when: rhel_instance_ids|length > 0

- name: Delete VPC route table
  ec2_vpc_route_table:
    region: "{{ region }}"
    vpc_id: "{{ vpc_id }}"
    lookup: id
    route_table_id: "{{ route_id }}"
    state: absent

- name: Delete public subnet
  ec2_vpc_subnet:
    region: "{{ region }}"
    cidr: "10.0.2.0/24"
    vpc_id: "{{ vpc_id }}"
    state: absent

- name: Delete Windows security group
  ec2_group:
    name: "dp-{{ workshop_prefix }}-win-sg"
    region: "{{ region }}"
    state: absent

- name: Delete RHEL security group
  ec2_group:
    name: "dp-{{ workshop_prefix }}-rhel-sg"
    region: "{{ region }}"
    state: absent

- name: Delete VPC internet gateway
  ec2_vpc_igw:
    region: "{{ region }}"
    vpc_id: "{{ vpc_id }}"
    state: absent

- name: Delete VPC
  ec2_vpc_net:
    name: "dp-{{ workshop_prefix }}-vpc"
    region: "{{ region }}"
    cidr_block: "10.0.0.0/16"
    state: absent

- name: Delete key
  ec2_key:
    name: "dp-{{ workshop_prefix }}-key"
    region: "{{ region }}"
    state: absent

...
